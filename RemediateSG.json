{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "StateMachineName": {
            "Type": "String",
            "Default": "OpenSecurity-group-remediation"
        }
    },
    "Resources": {
        "Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com",
                                    "lambda.amazonaws.com",
                                    {
                                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                                    }
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "StepFnRole",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "arn:aws:logs:*:*:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeSecurityGroups",
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:RevokeSecurityGroupIngress",
                                "ec2:AuthorizeSecurityGroupEgress",
                                "ec2:RevokeSecurityGroupEgress",
                                "ec2:DescribeRegions",
                                "lambda:InvokeFunction"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            }
        },
        "StateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": {
                    "Ref": "StateMachineName"
                },
                "DefinitionString": {
                    "Fn::Sub": [
                        "{  \"Comment\": \"Security group update with /32 and a description\",\n  \"StartAt\": \"Choosing the param\",\n  \"States\": {    \"Choosing the param\":{      \"Type\":\"Choice\",\n       \"Choices\": [        {          \"Variable\": \"$.SecurityGroupId\",\n          \"StringEquals\": \"\",\n          \"Next\": \"Security Group update without param\"        }      ],\n      \"Default\": \"Security Group update with param\"    },\n     \"Security Group update without param\": {      \"Type\": \"Parallel\",\n      \"End\": true,\n      \"Branches\": [        {         \"StartAt\": \"Group update without param : all traffic\",\n         \"States\": {           \"Group update without param : all traffic\": {             \"Type\": \"Task\",\n             \"Resource\":               \"${sg1}\",\n             \"End\": true           }         }       },\n       {                 \"StartAt\": \"Group update without param : Ipv4\",\n         \"States\": {           \"Group update without param : Ipv4\": {             \"Type\": \"Task\",\n             \"Resource\":               \"${sg11}\",\n             \"End\": true           }         }       },\n        {         \"StartAt\": \"Group update without param : Ipv6\",\n         \"States\": {           \"Group update without param : Ipv6\": {             \"Type\": \"Task\",\n             \"Resource\":               \"${sg111}\",\n             \"End\": true           }         }       }      ]          },\n    \"Security Group update with param\": {      \"Type\": \"Parallel\",\n      \"End\": true,\n      \"Branches\": [        {         \"StartAt\": \"Security Group update with param : All traffic\",\n         \"States\": {           \"Security Group update with param : All traffic\": {             \"Type\": \"Task\",\n             \"Resource\":               \"${sg2}\",\n             \"End\": true           }         }       },\n        {         \"StartAt\": \"Security Group update with param : Ipv4\",\n         \"States\": {           \"Security Group update with param : Ipv4\": {             \"Type\": \"Task\",\n             \"Resource\":               \"${sg22}\",\n             \"End\": true           }         }       },\n        {         \"StartAt\": \"Security Group update with param : Ipv6\",\n         \"States\": {           \"Security Group update with param : Ipv6\": {             \"Type\": \"Task\",\n             \"Resource\":               \"${sg222}\",\n             \"End\": true           }         }       }      ]          }}}",
                        {
                            "sg1": {
                                "Fn::GetAtt": [
                                    "SG1",
                                    "Arn"
                                ]
                            },
                            "sg11": {
                                "Fn::GetAtt": [
                                    "SG11",
                                    "Arn"
                                ]
                            },
                            "sg111": {
                                "Fn::GetAtt": [
                                    "SG111",
                                    "Arn"
                                ]
                            },
                            "sg2": {
                                "Fn::GetAtt": [
                                    "SG2",
                                    "Arn"
                                ]
                            },
                            "sg22": {
                                "Fn::GetAtt": [
                                    "SG22",
                                    "Arn"
                                ]
                            },
                            "sg222": {
                                "Fn::GetAtt": [
                                    "SG222",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "RoleArn": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                }
            }
        },
        "SG1": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
								"    elif ''.join(regions) == '*':",
								"        regions = []",
								"        ec2 = boto3.client('ec2')",
								"        response = ec2.describe_regions()",
								"        for list in response['Regions']:",
								"            regions.append(list['RegionName'])",
								"    else:",
								"        pass",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",                                
                                "        response = client.describe_security_groups(Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        for sgId in response['SecurityGroups']: ",
                                "                SGid = sgId['GroupId']",
                                "                try:",
                                "                    for sgVal in sgId['IpPermissions']:",
                                "                        try:",
                                "                            if sgVal['IpProtocol'] == '-1':",
                                "                                ipProtocol = sgVal['IpProtocol']",
                                "                                try:",
                                "                                    response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol)",
                                "                                    response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                    SGID.append(region+' : '+SGid)",
                                "                                except:",
                                "                                    pass",
                                "                                try:",
                                "                                    response = client.revoke_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol':ipProtocol,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                    response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                    SGID.append(region+' : '+SGid)",
                                "                                except:",
                                "                                    pass",
                                "                                try:",
                                "                                    response = client.revoke_security_group_egress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol)",
                                "                                    response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                    SGID.append(region+' : '+SGid)",
                                "                                except:",
                                "                                    pass",
                                "                                try:",
                                "                                    response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol':ipProtocol,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                    response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                    SGID.append(region+' : '+SGid)",
                                "                                except:",
                                "                                    pass",
                                "                            else:",
                                "                                pass",
                                "                        except:",
                                "                            pass",
                                "                except:",
                                "                    print SGid,': Not open to the world'",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG11": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
								"    elif ''.join(regions) == '*':",
								"        regions = []",
								"        ec2 = boto3.client('ec2')",
								"        response = ec2.describe_regions()",
								"        for list in response['Regions']:",
								"            regions.append(list['RegionName'])",
								"    else:",
								"        pass",								
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        response = client.describe_security_groups(Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        for sgId in response['SecurityGroups']: ",
                                "                SGid = sgId['GroupId']",
                                "                try:",
                                "                    for sgVal in sgId['IpPermissions']:",
                                "                        try:    ",
                                "                            if sgVal['IpRanges'][0]['CidrIp'] == '0.0.0.0/0' and sgVal['FromPort'] != 80 and sgVal['FromPort'] != 443:",
                                "                                ipProtocol = sgVal['IpProtocol']",
                                "                                fromPort = sgVal['FromPort']",
                                "                                toPort = sgVal['ToPort']",
                                "                                response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol,FromPort = fromPort,ToPort = toPort)",
                                "                                response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                response = client.revoke_security_group_egress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol,FromPort = fromPort,ToPort = toPort)",
                                "                                response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                SGID.append(region+' : '+SGid)",
                                "                            else:",
                                "                                pass",
                                "                        except:",
                                "                            print 'Ipv4 rules not found in ',SGid",
                                "                except:",
                                "                    pass",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG111": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
								"    elif ''.join(regions) == '*':",
								"        regions = []",
								"        ec2 = boto3.client('ec2')",
								"        response = ec2.describe_regions()",
								"        for list in response['Regions']:",
								"            regions.append(list['RegionName'])",
								"    else:",
								"        pass",								
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        response = client.describe_security_groups(Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        for sgId in response['SecurityGroups']: ",
                                "                SGid = sgId['GroupId']",
                                "                try:",
                                "                    for sgVal in sgId['IpPermissions']:",
                                "                        try:    ",
                                "                            if sgVal['Ipv6Ranges'][0]['CidrIpv6'] == '::/0' and sgVal['FromPort'] != 80 and sgVal['FromPort'] != 443:",
                                "                                ipProtocol = sgVal['IpProtocol']",
                                "                                fromPort = sgVal['FromPort']",
                                "                                toPort = sgVal['ToPort']",
                                "                                response = client.revoke_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'FromPort' : fromPort,'ToPort' : toPort,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'FromPort' : fromPort,'ToPort' : toPort,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                SGID.append(region+' : '+SGid)",
                                "                            else:",
                                "                                pass",
                                "                        except:",
                                "                            print 'Ipv6 rules not found in ',SGid",
                                "                except:",
                                "                    pass",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG2": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        SGids = event['SecurityGroupId'].split(\",\")",
                                "        for SGid in SGids:",
                                "                SGid = SGid.strip()",
								"                try:'",
                                "                   response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                   try:",
                                "                       for sgVal in response['SecurityGroups'][0]['IpPermissions']:",
                                "                           try:",
                                "                               if sgVal['IpProtocol'] == '-1':",
                                "                                   ipProtocol = sgVal['IpProtocol']",
                                "                                   try:",
                                "                                       response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol)",
                                "                                       response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                   except:",
                                "                                       pass",
                                "                                   try:",
                                "                                       response = client.revoke_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol':ipProtocol,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                       response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                   except:",
                                "                                       pass",
                                "                                   try:",
                                "                                       response = client.revoke_security_group_egress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol)",
                                "                                       response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                   except:",
                                "                                       pass",
                                "                                   try:",
                                "                                       response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol':ipProtocol,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                       response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                   except:",
                                "                                       pass",
                                "                               else:",
                                "                                   pass",
                                "                           except:",
                                "                               print 'Error with All Traffic rules'",
                                "                       SGID.append(region+' : '+SGid)",
                                "                   except:",
                                "                       pass",
								"                except:",
								"                   print 'Security Group Id',SGid,'not found in region',region",
                                "        return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG22": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        SGids = event['SecurityGroupId'].split(\",\")",
                                "        for SGid in SGids:",
                                "                SGid = SGid.strip()",
								"                try:",
                                "                   response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                   try:",
                                "                       for sgVal in response['SecurityGroups'][0]['IpPermissions']:",
                                "                           try:",
                                "                               if sgVal['IpRanges'][0]['CidrIp'] == '0.0.0.0/0' and sgVal['FromPort'] != 80 and sgVal['FromPort'] != 443:",
                                "                                   ipProtocol = sgVal['IpProtocol']",
                                "                                   fromPort = sgVal['FromPort']",
                                "                                   toPort = sgVal['ToPort']",
                                "                                   response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol,FromPort = fromPort,ToPort = toPort)",
                                "                                   response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                   response = client.revoke_security_group_egress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol,FromPort = fromPort,ToPort = toPort)",
                                "                                   response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                               else:",
                                "                                   pass",
                                "                           except:",
                                "                               print 'Ipv4 rules not found in ',SGid",
                                "                       SGID.append(region+' : '+SGid)",
                                "                   except:",
                                "                       pass",
								"                except:",
								"                   print 'Security Group Id',SGid,'not found in region',region",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG222": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        SGids = event['SecurityGroupId'].split(\",\")",
                                "        for SGid in SGids:",
                                "                SGid = SGid.strip()",
								"                try:",
                                "                   response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                   try:",
                                "                       for sgVal in response['SecurityGroups'][0]['IpPermissions']:",
                                "                           try:",
                                "                               if sgVal['Ipv6Ranges'][0]['CidrIpv6'] == '::/0' and sgVal['FromPort'] != 80 and sgVal['FromPort'] != 443:",
                                "                                   ipProtocol = sgVal['IpProtocol']",
                                "                                   fromPort = sgVal['FromPort']",
                                "                                   toPort = sgVal['ToPort']",
                                "                                   response = client.revoke_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'FromPort' : fromPort,'ToPort' : toPort,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                   response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                   response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'FromPort' : fromPort,'ToPort' : toPort,'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}])",
                                "                                   response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                               else:",
                                "                                   pass",
                                "                           except:",
                                "                               pass",
                                "                       SGID.append(region+' : '+SGid)",
                                "                   except:",
                                "                       pass",
								"                except:",
								"                   print 'Security Group id',SGid,'not found in region',region",								
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        }
    }
}
