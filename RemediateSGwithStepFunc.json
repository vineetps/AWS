{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "StateMachineName": {
            "Type": "String",
            "Default": "OpenSecurity-group-remediation"
        }
    },
    "Resources": {
        "Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com",
                                    "lambda.amazonaws.com",
                                    {
                                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                                    }
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "StepFnRole",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "arn:aws:logs:*:*:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeSecurityGroups",
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:AuthorizeSecurityGroupEgress",
                                "ec2:RevokeSecurityGroupIngress",
                                "ec2:RevokeSecurityGroupEgress",
                                "ec2:DescribeRegions",
                                "lambda:InvokeFunction"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            }
        },
        "StateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": {
                    "Ref": "StateMachineName"
                },
                "DefinitionString": {
                    "Fn::Sub": [
                        "{\r\n\t\"Comment\": \"Security group update with \/32 and a description\",\r\n\t\"StartAt\": \"Choosing the param\",\r\n\t\"States\": {\r\n\t\t\"Choosing the param\": {\r\n\t\t\t\"Type\": \"Choice\",\r\n\t\t\t\"Choices\": [{\r\n\t\t\t\t\"Variable\": \"$.SecurityGroupId\",\r\n\t\t\t\t\"StringEquals\": \"\",\r\n\t\t\t\t\"Next\": \"Security Group update without param\"\r\n\t\t\t}],\r\n\t\t\t\"Default\": \"Security Group update with param\"\r\n\t\t},\r\n\t\t\"Security Group update without param\": {\r\n\t\t\t\"Type\": \"Parallel\",\r\n\t\t\t\"End\": true,\r\n\t\t\t\"Branches\": [{\r\n\t\t\t\t\t\"StartAt\": \"Group update without param : all traffic\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Group update without param : all traffic\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg1}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"StartAt\": \"Group update without param : Ipv4\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Group update without param : Ipv4\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg11}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"StartAt\": \"Group update without param : AllTraffic-egress\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Group update without param : AllTraffic-egress\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg111}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"StartAt\": \"Group update without param : Ipv4-egress\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Group update without param : Ipv4-egress\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg1111}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t\"Security Group update with param\": {\r\n\t\t\t\"Type\": \"Parallel\",\r\n\t\t\t\"End\": true,\r\n\t\t\t\"Branches\": [{\r\n\t\t\t\t\t\"StartAt\": \"Security Group update with param : All traffic\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Security Group update with param : All traffic\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg2}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"StartAt\": \"Security Group update with param : Ipv4\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Security Group update with param : Ipv4\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg22}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"StartAt\": \"Security Group update with param : AllTraffic-egress\",\r\n\t\t\t\t\t\"States\": {\r\n\t\t\t\t\t\t\"Security Group update with param : AllTraffic-egress\": {\r\n\t\t\t\t\t\t\t\"Type\": \"Task\",\r\n\t\t\t\t\t\t\t\"Resource\": \"${sg222}\",\r\n\t\t\t\t\t\t\t\"End\": true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}",
                        {
                            "sg1": {
                                "Fn::GetAtt": [
                                    "SG1",
                                    "Arn"
                                ]
                            },
                            "sg11": {
                                "Fn::GetAtt": [
                                    "SG11",
                                    "Arn"
                                ]
                            },
                            "sg111": {
                                "Fn::GetAtt": [
                                    "SG111",
                                    "Arn"
                                ]
                            },
                            "sg1111": {
                                "Fn::GetAtt": [
                                    "SG1111",
                                    "Arn"
                                ]
                            },
                            "sg2": {
                                "Fn::GetAtt": [
                                    "SG2",
                                    "Arn"
                                ]
                            },
                            "sg22": {
                                "Fn::GetAtt": [
                                    "SG22",
                                    "Arn"
                                ]
                            },
                            "sg222": {
                                "Fn::GetAtt": [
                                    "SG222",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "RoleArn": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                }
            }
        },
        "SG1": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    elif ''.join(regions) == '*':",
                                "        regions = []",
                                "        ec2 = boto3.client('ec2')",
                                "        response = ec2.describe_regions()",
                                "        for list in response['Regions']:",
                                "            regions.append(list['RegionName'])",
                                "    else:",
                                "        pass",
                                "    SGID = []",
                                "    for region in regions:",
                                "        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        response = client.describe_security_groups(Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        for sgId in response['SecurityGroups']: ",
                                "                SGid = sgId['GroupId']",
                                "                try:",
                                "                    for sgVal in sgId['IpPermissions']:",
                                "                        try:",
                                "                            if sgVal['IpProtocol'] == '-1':",
                                "                                ipProtocol = sgVal['IpProtocol']",
                                "                                try:",
                                "                                    response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol)",
                                "                                    response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                    SGID.append(region+' : '+SGid)",
                                "                                except:",
                                "                                    pass",
                                "                            else:",
                                "                                pass",
                                "                        except:",
                                "                            pass",
                                "                except:",
                                "                    print SGid,': Not open to the world'",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG11": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
								"    elif ''.join(regions) == '*':",
								"        regions = []",
								"        ec2 = boto3.client('ec2')",
								"        response = ec2.describe_regions()",
								"        for list in response['Regions']:",
								"            regions.append(list['RegionName'])",
								"    else:",
								"        pass",								
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        ingress_response = client.describe_security_groups(Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        skip_ingress_ports = []",
                                "        for ports in range(15000,21000):",
                                "            skip_ingress_ports.append(ports)",
                                "        other_ports =[11, 47, 50, 51, 9000, 53, 80, 81, 8080, 8081, 443, 8443,5061, 5269, 1720, 5060, 5062,500, 4500, 1604, 53, 1719, 5060]",
                                "        skip_ingress_ports.extend(other_ports)",
                                "        for sgId in ingress_response['SecurityGroups']: ",
                                "                SGid = sgId['GroupId']",
                                "                try:",
                                "                    for sgVal in sgId['IpPermissions']:",
                                "                        try:    ",
                                "                            if sgVal['IpRanges'][0]['CidrIp'] == '0.0.0.0/0' sgVal['FromPort'] not in skip_ingress_ports:",
                                "                                ipProtocol = sgVal['IpProtocol']",
                                "                                fromPort = sgVal['FromPort']",
                                "                                toPort = sgVal['ToPort']",
                                "                                response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol,FromPort = fromPort,ToPort = toPort)",
                                "                                response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                                SGID.append(region+' : '+SGid)",
                                "                            else:",
                                "                                pass",
                                "                        except:",
                                "                            print 'Ipv4 rules not found in ',SGid",
                                "                except:",
                                "                    pass",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG111": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    elif ''.join(regions) == '*':",
                                "        regions = []",
                                "        ec2 = boto3.client('ec2')",
                                "        response = ec2.describe_regions()",
                                "        for list in response['Regions']:",
                                "            regions.append(list['RegionName'])",
                                "    else:",
                                "        pass",
                                "    SGID = []",
                                "    for region in regions:",
                                "        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        egress_response = client.describe_security_groups(Filters=[{'Name': 'egress.ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        skip_engress_ports =[]",
                                "        for ports in range(15000,21000):",
                                "            skip_engress_ports.append(ports)",
                                "        for ports in range(25000,30000):",
                                "            skip_engress_ports.append(ports)",
                                "        for ports in range(36000,60000):",
                                "            skip_engress_ports.append(ports)",
                                "        other_egress_ports =[8,47,50,51,53, 80, 81, 8080, 8081, 443, 8443, 5061, 5269, 10020, 1720, 5060,22, 1494, 2598, 3389, 5228, 8057,5228, 1604, 53, 123, 500, 4500, 5060,3478,9001,9002,9003, 10000]",
                                "        skip_engress_ports.extend(other_egress_ports)",
                                "        for sg_Id in egress_response['SecurityGroups']: ",
                                "            for sg_Val in sg_Id['IpPermissionsEgress']:",
                                "                try:",
                                "                    id = sg_Id['GroupId']",
                                "                    protocol = sg_Val['IpProtocol']",
                                "                    range = sg_Val['IpRanges'][0]['CidrIp']",
                                "                    if protocol == '-1' and range == '0.0.0.0/0':",
                                "                        response = client.revoke_security_group_egress(GroupId=id, IpPermissions=[{'IpProtocol':protocol,'IpRanges': [{'CidrIp':range}]}])",
                                "                        response = client.authorize_security_group_egress(GroupId=id,IpPermissions=[{'IpProtocol':protocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                        SGID.append(region+' : '+id)",
                                "                    else:",
                                "                        pass",
                                "                except:",
                                "                    print SGID,': Not open to the world'",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG1111": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
								"    elif ''.join(regions) == '*':",
								"        regions = []",
								"        ec2 = boto3.client('ec2')",
								"        response = ec2.describe_regions()",
								"        for list in response['Regions']:",
								"            regions.append(list['RegionName'])",
								"    else:",
								"        pass",								
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",        
                                "        egress_response = client.describe_security_groups(Filters=[{'Name': 'egress.ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "        skip_engress_port = []",
                                "        for ports in range(15000,21000):",
                                "            skip_engress_port.append(ports)",
                                "        for ports in range(25000,30000):",
                                "            skip_engress_port.append(ports)",
                                "        for ports in range(36000,60000):",
                                "            skip_engress_port.append(ports)",
                                "        other_egress_ports =[8,47,50,51,53, 80, 81, 8080, 8081, 443, 8443, 5061, 5269, 10020, 1720, 5060,22, 1494, 2598, 3389, 5228, 8057,5228, 1604, 53, 123, 500, 4500, 5060,3478,9001,9002,9003, 10000]",
                                "        skip_engress_ports.extend(other_egress_ports)",
                                "        for sg_Id in egress_response['SecurityGroups']: ",
                                "            SGid = sg_Id['GroupId']",
                                "            for sg_Val in sg_Id['IpPermissionsEgress']:",
                                "                try:",
                                "                   if sg_Val['IpRanges'][0]['CidrIp'] == '0.0.0.0/0' and sgVal['FromPort'] not in skip_engress_port:",
                                "                       ipProtocol = sg_Val['IpProtocol']",
                                "                       fromPort = sg_Val['FromPort']",
                                "                       toPort = sg_Val['ToPort']",
                                "                       response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/0'}],'ToPort': toPort}])",
                                "                       response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                       SGID.append(region+' : '+SGid)",
                                "                   else:",
                                "                       pass",
                                "                except:",
                                "                    print 'Ipv4 rules not found in ',SGid",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG2": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        SGids = event['SecurityGroupId'].split(\",\")",
                                "        for SGid in SGids:",
                                "                SGid = SGid.strip()",
								"                try:",
                                "                    response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                    try:",
                                "                        for sgVal in response['SecurityGroups'][0]['IpPermissions']:",
                                "                            try:",
                                "                                if sgVal['IpProtocol'] == '-1':",
                                "                                    ipProtocol = sgVal['IpProtocol']",
                                "                                    try:",
                                "                                        response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol)",
                                "                                        response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                    except:",
                                "                                        pass",
                                "                                else:",
                                "                                    pass",
                                "                            except:",
                                "                                print 'Error with All Traffic rules'",
                                "                        SGID.append(region+' : '+SGid)",
                                "                    except:",
                                "                        pass",
								"                except:",
                                "                    print 'Security Group Id',SGid,'not found in region',region",
                                "                try:",
                                "                    egress_response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'egress.ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                    for sgVal in egress_response['SecurityGroups'][0]['IpPermissionsEgress']:",
                                "                        try:",
                                "                            protocol = sgVal['IpProtocol']",
                                "                            range = sgVal['IpRanges'][0]['CidrIp']",
                                "                            if protocol == '-1' and range == '0.0.0.0/0':",
                                "                                response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': protocol,'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])",
                                "                                response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'IpProtocol': protocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}]}])",
                                "                                SGID.append(region+' : '+SGid)",
                                "                            else:",
                                "                                pass",
                                "                        except:",
                                "                            pass",
                                "                except:",
                                "                    print 'Ipv4 rules not found in ',SGid",
                                "        return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG22": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        SGids = event['SecurityGroupId'].split(\",\")",
                                "        for SGid in SGids:",
                                "                SGid = SGid.strip()",
								"                try:",
                                "                   response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                   skip_ingress_ports = []",
                                "                   for ports in range(15000,21000):",
                                "                       skip_ingress_ports.append(ports)",
                                "                   other_ports =[11, 47, 50, 51, 9000, 53, 80, 81, 8080, 8081, 443, 8443,5061, 5269, 1720, 5060, 5062,500, 4500, 1604, 53, 1719, 5060]",
                                "                   skip_ingress_ports.extend(other_ports)",
                                "                   try:",
                                "                       for sgVal in response['SecurityGroups'][0]['IpPermissions']:",
                                "                           try:",
                                "                               if sgVal['IpRanges'][0]['CidrIp'] == '0.0.0.0/0' and sgVal['FromPort'] not in skip_ingress_ports:",
                                "                                   ipProtocol = sgVal['IpProtocol']",
                                "                                   fromPort = sgVal['FromPort']",
                                "                                   toPort = sgVal['ToPort']",
                                "                                   response = client.revoke_security_group_ingress(GroupId=SGid,CidrIp='0.0.0.0/0',IpProtocol=ipProtocol,FromPort = fromPort,ToPort = toPort)",
                                "                                   response = client.authorize_security_group_ingress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                               else:",
                                "                                   pass",
                                "                           except:",
                                "                               print 'Ipv4 rules not found in ',SGid",
                                "                       SGID.append(region+' : '+SGid)",
                                "                   except:",
                                "                       pass",
								"                except:",
                                "                   print 'Security Group Id',SGid,'not found in region',region",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        },
        "SG222": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "def lambda_handler(event, context):",
                                "    regions = event['RegionName'].split(\",\")",
                                "    if ''.join(regions) == '':",
                                "        session = boto3.session.Session()",
                                "        region = session.region_name",
                                "        regions = [region]",
                                "    SGID = []",
                                "    for region in regions:",
								"        region = region.strip()",
                                "        client = boto3.client('ec2',region_name=region)",
                                "        SGids = event['SecurityGroupId'].split(\",\")",
                                "        for SGid in SGids:",
                                "                SGid = SGid.strip()",                
                                "                try:",
                                "                   response = client.describe_security_groups(GroupIds=[SGid],Filters=[{'Name': 'egress.ip-permission.cidr','Values': ['0.0.0.0/0']}])",
                                "                   skip_engress_port = []",
                                "                   for ports in range(15000,21000):",
                                "                       skip_engress_port.append(ports)",
                                "                   for ports in range(25000,30000):",
                                "                       skip_engress_port.append(ports)",
                                "                   for ports in range(36000,60000):",
                                "                       skip_engress_port.append(ports)",
                                "                   other_egress_ports =[8,47,50,51,53, 80, 81, 8080, 8081, 443, 8443, 5061, 5269, 10020, 1720, 5060,22, 1494, 2598, 3389, 5228, 8057,5228, 1604, 53, 123, 500, 4500, 5060,3478,9001,9002,9003, 10000]",
                                "                   skip_engress_ports.extend(other_egress_ports)",
                                "                   try:",
                                "                       for sgVal in response['SecurityGroups'][0]['IpPermissionsEgress']:",
                                "                           try:",
                                "                               if sgVal['IpRanges'][0]['CidrIp'] == '0.0.0.0/0' and sgVal['FromPort'] not in skip_engress_port:",
                                "                                   ipProtocol = sgVal['IpProtocol']",
                                "                                   fromPort = sgVal['FromPort']",
                                "                                   toPort = sgVal['ToPort']",
                                "                                   response = client.revoke_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/0'}],'ToPort': toPort}])",
                                "                                   response = client.authorize_security_group_egress(GroupId=SGid,IpPermissions=[{'FromPort': fromPort,'IpProtocol': ipProtocol,'IpRanges': [{'CidrIp': '0.0.0.0/32','Description': 'Remediated by ACP'}],'ToPort': toPort}])",
                                "                               else:",
                                "                                   pass",
                                "                           except:",
                                "                               print 'Ipv4 rules not found in ',SGid",
                                "                       SGID.append(region+' : '+SGid)",
                                "                   except:",
                                "                       pass",
								"                except:",
								"                   print 'Security Group Id',SGid,'not found in region',region",
                                "    return str(SGID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Timeout": 300
            }
        }
    }
}
